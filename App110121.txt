import React, { useState, useEffect } from 'react'
import { useQuery, useApolloClient, useSubscription } from '@apollo/client'
import Organs from './components/Organs'
import OrganForm from './components/OrganForm'
import MeetingForm from './components/MeetingForm'
import LoginForm from './components/LoginForm'
import Login from './components/Login'
import Organ from './components/Organ'
import CommentForm from './components/CommentForm'
import Comment from './components/Comment'
import Home from './components/Home'
import Gdpr from './components/Gdpr'
import Proposals from './components/Proposals'
import Municipalities from './components/Municipalities'
import Votes from './components/Votes'
import Info from './components/Info'
import Agendas from './components/Agendas'
import Agenda from './components/Agenda'
import Sections from './components/Sections'
import { ALL_ORGANS, ORGAN_ADDED } from './queries'
import Footer from './components/Footer'
import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link,
  Redirect,
  useRouteMatch,
  useHistory,
} from "react-router-dom"

import {
  Container,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableRow,
  Paper,
  TextField,
  Button,
  Toolbar,
  AppBar,
  IconButton,
  Typography,
  InputBase,

} from '@material-ui/core'

import { fade, makeStyles } from '@material-ui/core/styles';
import MenuIcon from '@material-ui/icons/Menu';
import SearchIcon from '@material-ui/icons/Search';

import { Alert } from '@material-ui/lab'

const useStyles = makeStyles((theme) => ({
  root: {
    flexGrow: 1,
  },
  menuButton: {
    marginRight: theme.spacing(2),
  },
  title: {
    flexGrow: 1,
    display: 'none',
    [theme.breakpoints.up('sm')]: {
      display: 'block',
    },
  },
  search: {
    position: 'relative',
    borderRadius: theme.shape.borderRadius,
    backgroundColor: fade(theme.palette.common.white, 0.15),
    '&:hover': {
      backgroundColor: fade(theme.palette.common.white, 0.25),
    },
    marginLeft: 0,
    width: '100%',
    [theme.breakpoints.up('sm')]: {
      marginLeft: theme.spacing(1),
      width: 'auto',
    },
  },
  searchIcon: {
    padding: theme.spacing(0, 2),
    height: '100%',
    position: 'absolute',
    pointerEvents: 'none',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
  inputRoot: {
    color: 'inherit',
  },
  inputInput: {
    padding: theme.spacing(1, 1, 1, 0),
    // vertical padding + font size from searchIcon
    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,
    transition: theme.transitions.create('width'),
    width: '100%',
    [theme.breakpoints.up('sm')]: {
      width: '12ch',
      '&:focus': {
        width: '20ch',
      },
    },
  },
}));





/*
const Organs = ({organs}) => (
  <div>
    <h2>Organs</h2>

    <TableContainer component={Paper}>
      <Table>
        <TableBody>
          {organs.map(organ => (
            <TableRow key={organ.id}>
              <TableCell>
                <Link to={`/organs/${organ.id}`}>{organ.content}</Link>
              </TableCell>
              <TableCell>
                {organ.user}
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>

  </div>
)
*/
const Users = () => (
  <div>
    <h2>Decisions as a Service app</h2>
    <ul>
      <li>Osmo Leppäniemi</li>
      <li>joku toinen</li>
    </ul>
  </div>
)





const Notify = ({ errorMessage }) => {
  if ( !errorMessage ) {
    return null
  }

  return (
    <div style={{color: 'red'}}>
      {errorMessage}
    </div>
  )
}

const App = () => {

  const [agendas, setAgenda] = useState([
    {
      id: 1,
      agendaname: 'Porin kaupunginhallituksen kokous 11.1.2021',
      organ: 'Porin kaupunginhallitus',
      municipalities: 'Pori'
    },
    {
      id: 2,
      agendaname: 'Ulvilan kaupunginhallituksen kokous 18.1.2021',
      organ: 'Ulvilan kaupunginhallitus',
      municipalities: 'Ulvila'
    },
    {
      id: 3,
      agendaname: 'Tampereen kaupunginvaltuuston kokous 25.1.2021',
      organ: 'Tampereen kaupunginvaltuusto',
      municipalities: 'Tampere'
    }
  ])
  const [organs, setOrgans] = useState([
    {
      id: 1,
      organname: ' Porin kaupunginhallitus',
      organshort: 'Porkh',
      organmunicipality: 'Pori'
    },
    {
      id: 2,
      organname: 'Porin kaupunginvaltuusto',
      organshort: 'Porkv',
      organmunicipality: 'Pori'
    },
    {
      id: 3,
      organname: 'Tampereen kaupunginhallitus',
      organshort: 'Tmpkh',
      organmunicipality: 'Tampere'
    },
    {
      id: 4,
      organname: 'Tampere kaupunginvaltuusto',
      organshort: 'Tamkv',
      organmunicipality: 'Tampere'
    },
    {
      id: 5,
      organname: 'Ulvilan kaupunginhallitus',
      organshort: 'Ulvkh',
      organmunicipality: 'Ulvila'
    },
    {
      id: 6,
      organname: 'Ulvilan kaupunginvaltuusto',
      organshort: 'Ulvkv',
      organmunicipality: 'Ulvila'
    },
    {
      id: 7,
      organname: 'Kankaanpään kaupunginhallitus',
      organshort: 'Kkpkh',
      organmunicipality: 'Kankaanpää'
    },
    {
      id: 8,
      organname: 'Kankaanpään kaupunginvaltuusto',
      organshort: 'Kkpkv',
      organmunicipality: 'Kankaanpää'
    },
    {
      id: 9,
      organname: 'Oulun kaupunginhallitus',
      organshort: 'Oulkh',
      organmunicipality: 'Oulu'
    },
    {
      id: 10,
      organname: 'Oulun kaupunginvaltuusto',
      organshort: 'Oulkv',
      organmunicipality: 'Oulu'
    }

  ])
  const [municipalities, setMunicipalities] = useState([
    {
      id: 1,
      name: 'Pori'
    },
    {
      id: 2,
      name: 'Tampere'
    },
    {
      id: 3,
      name: 'Ulvila'
    }
  ])
  const [organ, setOrgan] = useState([
    {
      id: 1,
      content: 'HTML is easy',
      important: true,
      user: 'Osmo Leppäniemi'
    },
    {
      id: 2,
      content: 'Browser can execute only Javascript',
      important: false,
      user: 'Osmo Leppäniemi'
    },
    {
      id: 3,
      content: 'Most important methods of HTTP-protocol are GET and POST',
      important: true,
      user: 'Donald Trump'
    }
  ])
  const [comment, setComment] = useState([
    {
      id: 1,
      content: 'HTML is easy',
      important: true,
      user: 'Osmo Leppäniemi'
    },
    {
      id: 2,
      content: 'Browser can execute only Javascript',
      important: false,
      user: 'Osmo Leppäniemi'
    },
    {
      id: 3,
      content: 'Most important methods of HTTP-protocol are GET and POST',
      important: true,
      user: 'Donald Trump'
    }
  ])
  const [meetings, setMeeting] = useState([
    {
      id: 1,
      content: 'HTML is easy',
      important: true,
      user: 'Osmo Leppäniemi'
    },
    {
      id: 2,
      content: 'Browser can execute only Javascript',
      important: false,
      user: 'Osmo Leppäniemi'
    },
    {
      id: 3,
      content: 'Most important methods of HTTP-protocol are GET and POST',
      important: true,
      user: 'Donald Trump'
    }
  ])
  const [user, setUser] = useState(null) 

  const [message, setMessage] = useState(null) 

  const login = (user) => {
    setUser(user)
    setMessage(`tervetuloa ${user}`)
    setTimeout(() => {
      setMessage(null)
    }, 10000*4)
  }

  

  const padding = {
    padding: 5
  }

  const [agenda,setagenda] = useState(null)
  const [sections,setsections] = useState([
    {
      id: 1,
      preparer: 'Ville valmistelija',
      casetext: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      proposalforadecision: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?',
      sectionmunicipality: 'Pori'
    },
    {
      id: 2,
      preparer: 'Ville valmistelija',
      casetext: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      proposalforadecision: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?',
      sectionmunicipality: 'Ulvila'
    },
    {
      id: 3,
      preparer: 'Vilma valmistelija',
      casetext: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      proposalforadecision: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?',
      sectionmunicipality: 'Tampere'
    }
  ])
  const [token, setToken] = useState(null)
  const [errorMessage, setErrorMessage] = useState(null) 
  const result = useQuery(ALL_ORGANS)
  const client = useApolloClient()

  const updateCacheWith = (addedOrgan) => {
    const includedIn = (set, object) => 
      set.map(p => p.id).includes(object.id)  

    const dataInStore = client.readQuery({ query: ALL_ORGANS })
    if (!includedIn(dataInStore.allOrgans, addedOrgan)) {
      client.writeQuery({
        query: ALL_ORGANS,
        data: { allOrgans : dataInStore.allOrgans.concat(addedOrgan) }
      })
    }   
  }

  useSubscription(ORGAN_ADDED, {
    onSubscriptionData: ({ subscriptionData }) => {
      const addedOrgan = subscriptionData.data.organAdded
      notify(`${addedOrgan.name} added`)
      updateCacheWith(addedOrgan)
    }
  })

  useEffect(() => {
    const token = localStorage.getItem('daas-user-token')
    if ( token ) {
      setToken(token)
    }
  }, [])

  if (result.loading)  {
    return <div>loading...</div>
  }

  const logout = () => {
    setToken(null)
    localStorage.clear()
    client.resetStore()
  }

  const notify = (message) => {
    setErrorMessage(message)
    setTimeout(() => {
      setErrorMessage(null)
    }, 5000)
  }
  /*const match = useRouteMatch('/agendas/:id')
  const agenda = match 
    ? agendas.find(agenda => agenda.id === Number(match.params.id))
    : null
*/
  
  if (!token) {
    return (
      <div>
        <Notify errorMessage={errorMessage} />
        <h2>Login</h2>
        <LoginForm
          setToken={setToken}
          setError={notify}
        />
      </div>
    )
  }
// <Organs organs={result.data.allOrgans} />
  return (
    <Container>
      <Router>
        <AppBar position="static">
          <Toolbar>
      
            <Button color="inherit" component={Link} to="/">
              Alku
            </Button>
            <Button color="inherit" component={Link} to="/municipalities">
              Kunnat
            </Button>
            <Button color="inherit" component={Link} to="/organs">
              Toimielimet
            </Button>
            <Button color="inherit" component={Link} to="/meetings">
              Kokoukset
            </Button>
            <Button color="inherit" component={Link} to="/agendas">
              Asialistat
            </Button>
            <Button color="inherit" component={Link} to="/sections">
              Asiat
            </Button>
            <Button color="inherit" component={Link} to="/factcomments">
              Kommentit
            </Button>
            <Button color="inherit" component={Link} to="/votes">
              Äänestys
            </Button>
            <Button color="inherit" component={Link} to="/proposals">
              Aloitteet
            </Button>
            <Button color="inherit" component={Link} to="/users">
              Käyttäjät
            </Button>
            <Button color="inherit" component={Link} to="/info">
              Info
            </Button>    
            <Button onClick={logout} >logout</Button>                        
          </Toolbar>
        </AppBar>
        
        <Notify errorMessage={errorMessage} />
        <Switch>
          <Route path="/home">
            <Home />
          </Route>
          <Route path="/agendas/:id">
            <Agenda agenda={agenda} />
          </Route>
          <Route path="/agendas">
            <Agendas agendas={agendas} />
          </Route>
          <Route path="/organs/:id">
            <Organ organ={organ} />
          </Route>
          <Route path="/organs">
            <Organs organs={organs} />
          </Route>
          <Route path="/sections">
            <Sections sections={sections} />
          </Route>
          <Route path="/factcomments">
            <CommentForm comments={comment} />
          </Route>
          <Route path="/meetings">
            <MeetingForm meetings={meetings} />
          </Route>
          <Route path="/comments/:id">
            <Comment comment={organs} />
          </Route>
          <Route path="/proposals">
            <Proposals />
          </Route>
          <Route path="/votes">
            <Votes />
          </Route>
          <Route path="/gdpr">
            <Gdpr />
          </Route>
          <Route path="/municipalities">
            <Municipalities municipalities={municipalities} />
          </Route>
          <Route path="/users">
            {user ? <Users /> : <Redirect to="/login" />}
          </Route>
          <Route path="/info">
            <Info />
          </Route>
          <Route path="/login">
            <Login onLogin={login} />
          </Route>
          <Route path="/">
            <Home />
          </Route>
        </Switch>
        
        <Footer/>
      </Router>
    </Container>
  )
}
/**
 * 
 * <OrganForm setError={notify} updateCacheWith={updateCacheWith} />
        <MeetingForm notify={notify}/>
 */
/**
 * 
 * {user
            ? <em>{user} logged in</em>
            : <Button color="inherit" component={Link} to="/login">
                LINK
              </Button>
          }  
 */
/**
 * 
 * 
 * const App = () => {
  const [notes, setNotes] = useState([
    {
      id: 1,
      content: 'HTML is easy',
      important: true,
      user: 'Osmo Leppäniemi'
    },
    {
      id: 2,
      content: 'Browser can execute only Javascript',
      important: false,
      user: 'Osmo Leppäniemi'
    },
    {
      id: 3,
      content: 'Most important methods of HTTP-protocol are GET and POST',
      important: true,
      user: 'Arto Hellas'
    }
  ])

  const [user, setUser] = useState(null) 

  const [message, setMessage] = useState(null) 

  const login = (user) => {
    setUser(user)
    setMessage(`welcome ${user}`)
    setTimeout(() => {
      setMessage(null)
    }, 10000*4)
  }

  const padding = {
    padding: 5
  }

  const match = useRouteMatch('/notes/:id')
  const note = match 
    ? notes.find(note => note.id === Number(match.params.id))
    : null

  return (
    <Container>
      <AppBar position="static">
        <Toolbar>
          <Button color="inherit" component={Link} to="/">
            home
          </Button>
          <Button color="inherit" component={Link} to="/notes">
            notes
          </Button>
          <Button color="inherit" component={Link} to="/users">
            users
          </Button>   
          {user
            ? <em>{user} logged in</em>
            : <Button color="inherit" component={Link} to="/login">
                LINK
              </Button>
          }                              
        </Toolbar>
      </AppBar>

      {(message &&
        <Alert severity="success">
          {message}
        </Alert>
      )}

      <Switch>
        <Route path="/notes/:id">
          <Note note={note} />
        </Route>
        <Route path="/notes">
          <Notes notes={notes} />
        </Route>
        <Route path="/users">
          {user ? <Users /> : <Redirect to="/login" />}
        </Route>
        <Route path="/login">
          <Login onLogin={login} />
        </Route>
        <Route path="/">
          <Home />
        </Route>
      </Switch>
      <div>
        <br />
        <em>Note app, Department of Computer Science 2020</em>
      </div>
    </Container>
  )
}


 */
export default App